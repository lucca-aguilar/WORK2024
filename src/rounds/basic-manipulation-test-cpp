#include <basic-manipulation-test.h>
#include <Setup.h>

void basicManipulationTest() {
    int cube_counter = 0;
    Serial.println("Entrou na função");
    while(true) {
        Serial.println("Entrou na função");
        // variaveis globais
        int tableHeight = 0;
        int cubeCounter = 0;
        Serial.println("Definiu variaveis");
        // coloca a garra nas posicoes corretas
        Tortuga.defaultClawPosition();
        Serial.println("garra inicial");
        while (true) { // anda ate encontrar a mesa
            Tortuga.moveForward(150);
            int front_distance = usSensorFront.getDistance();
            if (front_distance <= 10) { // se alinha com a mesa
                Tortuga.motorsConfiguration(300, 300);
                Tortuga.moveForward(100);
                Tortuga.motorsConfiguration(stepper_motors_velocity, stepper_motors_acceleration);
                break;
            }
        }
        Serial.println("encontrou a mesa");
        // verifica altura da mesa
        int table_height = Tortuga.checkTableHeightFront();

        // escaneia em busca de um cubo pela frente
        boolean cubeFound = Tortuga.checkForCubeFront(table_height);

        if(cubeFound){
          Tortuga.getCubeFront(table_height); //confirmacao que pegou o cubo
          char cube_color = Tortuga.checkCubeColor();
          if (cube_color == 'B') {
            rgbLED.blue();
            rgbLED.off();
          } else {
            rgbLED.red();
            rgbLED.off();
          }
          cube_counter++;
        }

        if(!cubeFound){ // procura na parte de trás da mesa
          Tortuga.moveLeft(500);
          Tortuga.moveForward(1200);
          Tortuga.rotateClockwise(562);
          Tortuga.moveLeft(500);

          cubeFound = Tortuga.checkForCubeBack(table_height);

          if(cubeFound){
            Tortuga.getCubeBack(table_height); //getcubeBack
            char cube_color = Tortuga.checkCubeColor();
            if (cube_color == 'B') {
              rgbLED.blue();
              rgbLED.off();
            } else {
              rgbLED.red();
              rgbLED.off();
            }
            cube_counter++;

            Tortuga.moveForward(1200);
            Tortuga.rotateClockwise(562);
          }else{
            // cubeNotfound
          }
        }
        break;
    }
}